"""
Django settings for exammanagement project.

Generated by 'django-admin startproject' using Django 3.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

import environs
import pymysql
from django.contrib.messages import constants as messages
from django.utils.translation import gettext_lazy as _

# Read env variables
# https://github.com/sloria/environs
env = environs.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = env.path("BASE_DIR", Path(__file__).resolve().parent.parent)

env.read_env(os.path.join(BASE_DIR, "..", ".env"), recurse=False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("DJANGO_SECRET_KEY", default="")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", default=True)

ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "jquery",
    "main.apps.MainConfig",
    "bootstrap5",
    "sass_processor",
    "crispy_forms",
    "crispy_bootstrap5",
    "widget_tweaks",
    "storages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "exammanagement.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

MESSAGE_TAGS = {
    messages.DEBUG: "alert-info",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

WSGI_APPLICATION = "exammanagement.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": env.str("DB_NAME", default=""),
        "USER": env.str("DB_USER", default=""),
        "PASSWORD": env.str("DB_PASSWORD", default=""),
        "HOST": env.str("DB_HOST", default=""),
        "PORT": env.str("DB_PORT", default=""),
    },
}

pymysql.install_as_MySQLdb()


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGES = [
    ("en", _("English")),
    ("vi", _("Vietnamese")),
]

LANGUAGE_CODE = env.str("DJANGO_LANGUAGE_CODE", default="en")

TIME_ZONE = env.str("DJANGO_TIME_ZONE", default="UTC")

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (BASE_DIR / "locale/",)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = env.str("STATIC_URL", default="/static/")

STATICFILES_DIR = [
    BASE_DIR / "/main/static",
]

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "sass_processor.finders.CssFinder",
]

STATIC_ROOT = env.str("STATIC_ROOT", default=str(os.path.join(BASE_DIR, "staticfiles")))

SASS_PROCESSOR_ROOT = STATIC_ROOT

AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", default="public-read")

if env.bool("ENABLE_COLLECTSTATIC_S3", default=False):
    # https://github.com/etianen/django-s3-storage
    STATICFILES_STORAGE = "django_s3_storage.storage.ManifestStaticS3Storage"
    AWS_ACCESS_KEY_ID = env.str("AWS_S3_ACCESS_KEY_ID_STATIC")
    AWS_SECRET_ACCESS_KEY = env.str("AWS_S3_SECRET_ACCESS_KEY_STATIC")
    AWS_REGION = env.str("AWS_REGION_STATIC")
    AWS_S3_BUCKET_NAME_STATIC = env.str("AWS_S3_BUCKET_NAME_STATIC")
    AWS_S3_BUCKET_AUTH_STATIC = False
    AWS_S3_PUBLIC_URL_STATIC = env.str("AWS_S3_PUBLIC_URL_STATIC", default="")
    AWS_S3_KEY_PREFIX_STATIC = env.str("AWS_S3_KEY_PREFIX_STATIC", default="")
elif env.bool("ENABLE_MANIFEST_STORAGE", default=False):
    # https://docs.djangoproject.com/en/3.1/ref/contrib/staticfiles/#manifeststaticfilesstorage

    STATICFILES_STORAGE = (
        "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
    )


FORCE_SCRIPT_NAME = env.str("FORCE_SCRIPT_NAME", default="")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "/"

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "filters": ["require_debug_true"],
        },
    },
    "loggers": {
        "mylogger": {
            "handlers": ["console"],
            "level": env.str("LOGGING_LEVEL", default="INFO"),
            "propagate": True,
        },
    },
}

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env.str("EMAIL_HOST", "")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = env.str("EMAIL_HOST_USER", "")

if not env.bool("ENABLE_COLLECTSTATIC_S3", default=False):
    AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID_UPLOAD", default="")
    AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY_UPLOAD", default="")
    AWS_S3_REGION_NAME = env.str("AWS_REGION_UPLOAD", default="ap-south-1")
    AWS_STORAGE_BUCKET_NAME = env.str(
        "AWS_S3_BUCKET_NAME_UPLOAD", default="exammanagement"
    )
    AWS_S3_SIGNATURE_NAME = env.str("AWS_S3_SIGNATURE_NAME", default="s3v4")

    AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", default=None)
    AWS_USE_PATH_STYLE_ENDPOINT = env.bool("AWS_USE_PATH_STYLE_ENDPOINT", default=False)

    MEDIA_URL = "https://%s.s3.amazonaws.com/" % AWS_STORAGE_BUCKET_NAME

    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=[])
